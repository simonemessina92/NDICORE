#!/bin/sh

# === COLORS ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# === CONFIGURATION ===
DOWNLOAD_URL="https://download.kiloview.com/NDICORE/install-kiloview-ndicore-1.10.0095-software-20250311.tar.gz"
TMP_DIR="/tmp/ndicore_install"
TAR_FILE="$TMP_DIR/kiloview_ndicore.tar.gz"
CONTAINER_NAME="Ndicore"
IMAGE_TAG="kiloview/ndicore:1.10.0095"

# === PREPARE ENVIRONMENT ===
mkdir -p "$TMP_DIR" || exit 1
cd "$TMP_DIR" || exit 1

# === CHECK FOR DEPENDENCIES ===
command -v curl >/dev/null 2>&1 || { echo "${YELLOW}curl not found. Installing...${NC}"; apt update && apt install -y curl; }
command -v docker >/dev/null 2>&1 || { echo "${YELLOW}docker not found. Installing...${NC}"; curl -fsSL https://get.docker.com | sh; }
command -v avahi-daemon >/dev/null 2>&1 || { echo "${YELLOW}avahi-daemon not found. Installing...${NC}"; apt update && apt install -y avahi-daemon; }

# === DOWNLOAD FILE ===
echo "${CYAN}Downloading NDICore package...${NC}"
curl -fSL "$DOWNLOAD_URL" -o "$TAR_FILE" || { echo "${RED}Failed to download package.${NC}"; exit 1; }

# === VERIFY FILE ===
if [ ! -f "$TAR_FILE" ]; then
  echo "${RED}Downloaded file not found: $TAR_FILE${NC}"
  exit 1
fi

# === EXTRACT FILE ===
echo "${CYAN}Extracting package...${NC}"
tar -xzf "$TAR_FILE" -C "$TMP_DIR" || { echo "${RED}Extraction failed.${NC}"; exit 1; }
echo "${GREEN}Extraction completed successfully âœ…${NC}"

# === FIND DOCKER IMAGE ===
IMAGE_TAR="$(find "$TMP_DIR" -name 'image-*.tar' | head -n 1)"

if [ ! -f "$IMAGE_TAR" ]; then
  echo "${RED}Docker image not found after extraction.${NC}"
  exit 1
fi

# === LOAD DOCKER IMAGE ===
echo "${CYAN}Loading Docker image...${NC}"
docker load -i "$IMAGE_TAR" || { echo "${RED}Failed to load Docker image.${NC}"; exit 1; }
echo "${GREEN}Docker image loaded successfully âœ…${NC}"

# === REMOVE OLD CONTAINER IF EXISTS ===
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}\$"; then
  echo "${YELLOW}Removing existing container...${NC}"
  docker rm -f "$CONTAINER_NAME"
fi

# === RUN DOCKER CONTAINER ===
echo "${CYAN}Starting Docker container...${NC}"
docker run --name="$CONTAINER_NAME" \
  -idt --network host --privileged=true --restart=always \
  -v /etc/localtime:/etc/localtime:ro \
  -v /var/run/avahi-daemon:/var/run/avahi-daemon \
  -v /var/run/dbus:/var/run/dbus \
  -v /opt/package:/opt/package \
  -v /upgrade:/upgrade \
  -v /root/cp_data_hardware:/app/data/ndicore \
  "$IMAGE_TAG" /usr/local/bin/ndicore_start.sh || { echo "${RED}Failed to start container.${NC}"; exit 1; }

echo "${GREEN}Container started successfully! ðŸš€${NC}"

# === CLEANUP ===
echo "${CYAN}Cleaning up temporary files...${NC}"
rm -rf "$TMP_DIR"

echo "${GREEN}Installation completed! ðŸŽ‰${NC}"
exit 0
